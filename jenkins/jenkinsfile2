pipeline {
    agent any
    environment{
        AWS_KEY='aws-keys'
        AWS_ACCESS_KEY_ID = credentials('aws-access-key-id')
        AWS_SECRET_ACCESS_KEY = credentials('aws-secret-access-key')
        MONGO_URL=credentials('MONGO_URL')
        AWS_S3_BUCKET=credentials('AWS_S3_BUCKET')
        DOCKER_HUB_CREDENTIALS= 'docker-hub-credencials'
        DOCKER_IMAGE_FRONTEND = 'flowerking21/streaming_frontend'
        DOCKER_IMAGE_BACKEND_stream = 'flowerking21/streaming_backend_streamservice'
        EC2_USER='ubuntu'
        SSH_KEY = credentials('ssh_key')
    }

    stages {
        stage('Hello') {
            steps {
                echo 'Hello World'
            }
        }
        stage('CHECKOUT') {
            steps {
                echo 'clone the git code' 
                git branch: 'poo', url:'https://github.com/garimas007/StreamingApp.git'
            }
        }
        
        stage('create .env'){
            steps{
                script {
                    def envContent = """
                        PORT=3002
                        MONGO_URL=${MONGO_URL}
                        JWT_SECRET_KEY="MYREALLYSECRETKEY"
                        AWS_ACCESS_KEY_ID=${AWS_ACCESS_KEY_ID}
                        AWS_SECRET_ACCESS_KEY=${AWS_SECRET_ACCESS_KEY}
                        AWS_REGION='us-east-1'
                        AWS_S3_BUCKET=${AWS_S3_BUCKET}
                    """
                    writeFile(file: './backend/streamingService/.env', text: envContent.trim())
                }
            }
        }
        
         stage('build images') {
            parallel {
                stage('build backend') {
                    steps {
                        script {
                           docker.build("${env.DOCKER_IMAGE_BACKEND_stream}:${env.BUILD_ID}", './backend/streamingService/')
                            echo ("done")
                        }
                    }
                }
                stage('build frontend') {
                    steps {
                        script {
                            docker.build("${env.DOCKER_IMAGE_FRONTEND}:${env.BUILD_ID}", './frontend/')
                            echo ("done")
                        }
                    }
                }
            }
        }
        
        stage('push to docker'){
            steps{
                script{
                    docker.withRegistry('https://index.docker.io/v1/', 'docker-hub-credentials') {
                        docker.image("${env.DOCKER_IMAGE_BACKEND_stream}:${env.BUILD_ID}").push()
                        docker.image("${env.DOCKER_IMAGE_FRONTEND}:${env.BUILD_ID}").push()
                        echo ("done")
                    }
                }
            }
        }
        
        
        stage('frontend deployment') {
                    steps {
                        script {
                            
                             dir('tera_ansi') {
                                 sh "ls -la"
                                 withCredentials([sshUserPrivateKey(credentialsId: 'ssh_key', keyFileVariable: 'SSH_PRIVATE_KEY')]) {
                                     // Set appropriate permissions on SSH key file
                                        sh "echo \"$SSH_PRIVATE_KEY\" > ssh_key"
                                        sh "chmod 600 ssh_key"

                                 ansiblePlaybook(
                                    playbook: 'frontendplaybook.yaml',
                                    inventory: 'inventory',
                                    credentialsId: 'ssh_key',
                                    extras: "-e 'ansible_python_interpreter=/usr/bin/python3 -e jenkins_build_number=${env.BUILD_ID}'"
                                )
                                 }
                            }
                            
                        }
                    }
        }
        stage('backend deployment') {
                    steps {
                        script {
                            
                             dir('tera_ansi') {
                                 sh "ls -la"
                                 withCredentials([sshUserPrivateKey(credentialsId: 'ssh_key', keyFileVariable: 'SSH_PRIVATE_KEY')]) {
                                     // Set appropriate permissions on SSH key file
                                        sh "echo \"$SSH_PRIVATE_KEY\" > ssh_key"
                                        sh "chmod 600 ssh_key"

                                 ansiblePlaybook(
                                    playbook: 'backendplaybook.yaml',
                                    inventory: 'inventory',
                                    credentialsId: 'ssh_key',
                                    extras: "-e 'ansible_python_interpreter=/usr/bin/python3 -e jenkins_build_number=${env.BUILD_ID}'"
                                )
                                 }
                            }
                            
                        }
                    }
        }
                    
    }
}
